function x({data:i,validation:u={},message:k={}}){const c={},a={},g=Object.assign({},i),o=new Map,d=async()=>{const e=Object.keys(c);let t=!0;for(const n of e){const s=c[n];if(!await s(r[n])){t=!1;break}}return t},y=async e=>{const t=c[e];return!(t&&!await t(r[e]))},C=function(e){return u?u[e]:{}},F=function(e){return k?k[e]:{}},w=function(){const e=Object.keys(i),t={};return e.forEach(n=>{t[n]=r[n]}),t},h=function(e,t){for(const n in i)t?b[n]=e[n]:(r[n]=e[n],V(n,e[n]))},j=(e,t)=>{c[e]=t},O=(e,t)=>{a[e]=t},l=e=>{if(e){const t=a[e];t&&t()}else{const t=Object.keys(a);for(const n of t){const s=a[n];s&&s()}}},m=()=>{h(g),l()},V=(e,t)=>{if(o.has(e)){const[n,s]=o.get(e);s(t)}},r={...i,isValid:d,validate:d,getFormData:w,setFormData:h,setCheckValid:j,getValidation:C,getMessage:F,bindController:(e,t,n)=>{o.set(e,[t,n])},setClearValid:O,clearValidates:l,resetFieldsValidate:l,checkField:y,resetFields:m},b=new Proxy(r,{get(e,t,n){if(o.has(t)){const[s,f]=o.get(t);return s()}return e[t]},set(e,t,n,s){e[t]=n,V(t,n);const f=c[t];return f&&f(n),!0}});return b}export{x as u};
