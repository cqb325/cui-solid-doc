function m({data:a,validation:l={},message:u={}}){const c={},i={},o=new Map,h=async()=>{const e=Object.keys(c);let t=!0;for(const s of e){const n=c[s];if(!await n(r[s])){t=!1;break}}return t},b=async e=>{const t=c[e];return!(t&&!await t(r[e]))},g=function(e){return l?l[e]:{}},C=function(e){return u?u[e]:{}},w=function(){const e=Object.keys(a),t={};return e.forEach(s=>{t[s]=r[s]}),t},F=function(e,t){Object.keys(a).forEach(n=>{t?V[n]=e[n]:(r[n]=e[n],k(n,e[n]))})},j=(e,t)=>{c[e]=t},y=(e,t)=>{i[e]=t},d=e=>{if(e){const t=i[e];t&&t()}else{const t=Object.keys(i);for(const s of t){const n=i[s];n&&n()}}},k=(e,t)=>{if(o.has(e)){const[s,n]=o.get(e);n(t)}},r={...a,isValid:h,validate:h,getFormData:w,setFormData:F,setCheckValid:j,getValidation:g,getMessage:C,bindController:(e,t,s)=>{o.set(e,[t,s])},setClearValid:y,clearValidates:d,resetFieldsValidate:d,checkField:b},V=new Proxy(r,{get(e,t,s){if(o.has(t)){const[n,f]=o.get(t);return n()}return e[t]},set(e,t,s,n){e[t]=s,k(t,s);const f=c[t];return f&&f(s),!0}});return V}export{m as u};
